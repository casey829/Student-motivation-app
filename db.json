{
  "users": [
    {
      "id": "1",
      "name": "Admin User",
      "role": "admin",
      "email": "admin@example.com",
      "password": "adminpass",
      "profile": {
        "interests": []
      }
    },
    {
      "id": "2",
      "name": "Staff User",
      "role": "staff",
      "email": "staff@example.com",
      "password": "staffpass",
      "profile": {
        "interests": []
      }
    },
    {
      "id": "3",
      "name": "Student User",
      "role": "student",
      "email": "student@example.com",
      "password": "studentpass",
      "profile": {
        "interests": [
          "DevOps",
          "Fullstack"
        ],
        "wishlist": [
          1,
          2
        ],
        "customInterests": [
          "AI",
          "Machine Learning"
        ]
      }
    },
    {
      "id": "960d",
      "type": "Staff",
      "name": "Yooh"
    },
    {
      "id": "2350149",
      "type": "Staff",
      "name": "Puss Puss"
    },
    {
      "id": "2350149"
    }
  ],
  "categories": [
    {
      "id": "1",
      "name": "DevOps",
      "description": "Content related to DevOps practices and tools."
    },
    {
      "id": "2",
      "name": "Fullstack",
      "description": "Content related to Fullstack development."
    },
    {
      "id": "3",
      "name": "Front-End",
      "description": "Content related to Front-End development."
    }
  ],
  "content": [
    {
      "id": "1",
      "type": "video",
      "title": "Introduction to DevOps",
      "description": "A comprehensive guide to DevOps.",
      "categoryId": 1,
      "authorId": 2,
      "status": "published",
      "likes": 10,
      "dislikes": 1,
      "comments": [
        {
          "id": 1,
          "userId": 3,
          "content": "Great video! Very informative.",
          "replies": []
        }
      ]
    },
    {
      "id": "2",
      "type": "article",
      "title": "Fullstack Development Basics",
      "description": "An article on the basics of Fullstack development.",
      "categoryId": 2,
      "authorId": 3,
      "status": "draft",
      "likes": 5,
      "dislikes": 0,
      "comments": []
    },
    {
      "id": "cff0",
      "title": "s<srhsdthd",
      "description": "fhhdffhseth",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "55f8",
      "title": "r4rtaeserfhdf",
      "description": "tshsr5u46yuj",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "54dd",
      "title": "FullStack staff",
      "description": "Learning experience",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "f655",
      "title": "e3w4t",
      "description": "weefasrg",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "4ff4",
      "title": "ef24t4y5y45",
      "description": "swewe",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "7e9a",
      "title": "thsrt",
      "description": "erhsetj",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "e15c",
      "title": "yij,",
      "description": "hjkv",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "1f8e",
      "title": "ggndf",
      "description": "ryj",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "25e6",
      "title": "gbeet",
      "description": "ehe",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5"
    },
    {
      "id": "1c9c",
      "title": "SFAE5UU7E4",
      "description": "dthr6iue5e",
      "link": "dttjrsykjt.com"
    },
    {
      "id": "0ba3",
      "title": "hw54thyrth",
      "description": "erfhseetgh",
      "link": "ryaer/.vcom"
    },
    {
      "id": "0d41",
      "title": "ddgesrh",
      "description": "shdth",
      "link": "ryaer/.vcom"
    },
    {
      "id": "0ef5",
      "title": "rggnsryj",
      "description": "et5uw3356u",
      "link": "aetjjstrj.com"
    },
    {
      "id": "4402",
      "title": "Using Figma for Begginers",
      "description": "Learning figma as an absolute begginer.",
      "link": "https://youtu.be/ezldKx-jPag?si=iDSO331wMJRjw3Kk"
    },
    {
      "id": "73c7",
      "title": "Figma as a Begginer",
      "description": "Learning Figma as a Begginer",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5",
      "thumbnail": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ezldKx-jPag?si=Q8DhvTnek1qU6rsS\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
    },
    {
      "id": "bbff",
      "title": "dttu7k",
      "description": "tcuilyi",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5",
      "thumbnail": "import React, { useState, useRef } from \"react\"; import { CiFlag1, CiUser } from \"react-icons/ci\"; import { FcApprove } from \"react-icons/fc\"; import { IoIosArrowDropdown, IoIosLogOut } from \"react-icons/io\"; import { IoAddCircleOutline } from \"react-icons/io5\"; import { TiUserAdd } from \"react-icons/ti\"; import { HiOutlineUserRemove } from \"react-icons/hi\"; import { MdOutlineSpaceDashboard } from \"react-icons/md\";  function AdminDashboard() {   const [isModalOpen, setIsModalOpen] = useState(false);   const [modalType, setModalType] = useState(\"\"); // 'addUser', 'deactivateUser', 'addContent'   const [userType, setUserType] = useState(\"\");   const [userName, setUserName] = useState(\"\");   const [userId, setUserId] = useState(\"\");   const [contentType, setContentType] = useState(\"\"); // 'Video', 'Audio', 'Article'   const [contentData, setContentData] = useState({     title: \"\",     description: \"\",     link: \"\",     thumbnail: \"\" // Added field for thumbnail   });   const [contentList, setContentList] = useState([]);   const [selectedCategory, setSelectedCategory] = useState(\"\"); // Added state for category   const [isLoggedIn, setIsLoggedIn] = useState(true); // Replace with actual authentication logic   const [role, setRole] = useState('Admin'); // Default role, change based on login    const addUserRef = useRef(null);   const deactivateUserRef = useRef(null);    const handleOpenModal = (type, ref) => {     setModalType(type);     setIsModalOpen(true);     if (ref.current) {       ref.current.focus();     }   };    const handleCloseModal = () => {     setIsModalOpen(false);     setModalType(\"\");     setUserType(\"\");     setUserName(\"\");     setUserId(\"\");     setContentType(\"\");     setContentData({       title: \"\",       description: \"\",       link: \"\",       thumbnail: \"\" // Reset thumbnail     });     setSelectedCategory(\"\"); // Reset category   };    const handleUserTypeChange = (e) => setUserType(e.target.value);   const handleUserNameChange = (e) => setUserName(e.target.value);   const handleUserIdChange = (e) => setUserId(e.target.value);   const handleContentChange = (e) => {     const { name, value } = e.target;     setContentData((prevData) => ({ ...prevData, [name]: value }));   };    const handleCategoryChange = (e) => setSelectedCategory(e.target.value);    const handleAddUser = async (e) => {     e.preventDefault();     try {       const response = await fetch('http://localhost:3000/users', {         method: 'POST',         headers: {           'Content-Type': 'application/json'         },         body: JSON.stringify({ id: userId, type: userType, name: userName })       });       const data = await response.json();       console.log(data.message);       handleCloseModal();     } catch (error) {       console.error(\"Error adding user:\", error);     }   };    const handleDeactivateUser = async (e) => {     e.preventDefault();     try {       const response = await fetch('http://localhost:3000/users/deactivate', {         method: 'POST',         headers: {           'Content-Type': 'application/json'         },         body: JSON.stringify({ id: userId })       });       const data = await response.json();       console.log(data.message);       handleCloseModal();     } catch (error) {       console.error(\"Error deactivating user:\", error);     }   };    const handleCreateContent = async (e) => {     e.preventDefault();     try {       const response = await fetch('http://localhost:3000/content', {         method: 'POST',         headers: {           'Content-Type': 'application/json'         },         body: JSON.stringify({ ...contentData, category: selectedCategory }) // Include selected category       });       const data = await response.json();       console.log(data.message);       setContentList([...contentList, { ...contentData, type: contentType, category: selectedCategory }]); // Update content list with new content       handleCloseModal();     } catch (error) {       console.error(\"Error creating content:\", error);     }   };    const handleCategorySelect = (type) => setContentType(type);    return (     <div className=\"dashboard-containers\">       <div className=\"sidebar\">         <div className=\"logo\">Logo</div>         <div className=\"sidebar-item\">           <MdOutlineSpaceDashboard className=\"sidebar-icon\" />            <span className=\"sidebar-text\">Dashboard</span>         </div>         <p className=\"sidebar-item\">           <CiUser className=\"sidebar-icon\" />            <span className=\"sidebar-text\">Profile</span>         </p>         <div className=\"sidebar-item\" onClick={() => handleOpenModal('addUser', addUserRef)}>           <TiUserAdd className=\"sidebar-icon\" />           <span className=\"sidebar-text\">Add User</span>         </div>         <div className=\"sidebar-item\" onClick={() => handleOpenModal('deactivateUser', deactivateUserRef)}>           <HiOutlineUserRemove className=\"sidebar-icon\" />           <span className=\"sidebar-text\">Deactivate User</span>         </div>         <div className=\"add-icon-container\" onClick={() => handleOpenModal('addContent')}>           <IoAddCircleOutline className=\"add-icon\" /><span>Add Content</span>         </div>         <div className=\"profile-section\">           {isLoggedIn ? (             <i className=\"sidebar-item\">               <IoIosLogOut className=\"sidebar-icon\" /><span className=\"sidebar-text\">{role}</span>             </i>           ) : (             <i className=\"sidebar-item\">               <IoIosLogOut className=\"sidebar-icon\" /><span className=\"sidebar-text\">Login</span>             </i>           )}         </div>       </div>        <div className=\"main-content\">         <div className=\"content\">           {contentList.length > 0 && contentList.map((content, index) => (             <div key={index} className=\"section\">               <div className=\"content-item\">                 <img src={content.thumbnail} alt={`${content.type} Thumbnail`} className=\"content-thumbnail\" />                 <h3>{content.title}</h3>                 <p>{content.description}</p>                 <a href={content.link} target=\"_blank\" rel=\"noopener noreferrer\">                   {content.type === 'Video' ? 'Watch Video' : content.type === 'Audio' ? 'Listen to Audio' : 'Read Article'}                 </a>                 <ul className=\"actions\">                   <li>                     <button className=\"categorize-btn\" onClick={() => handleOpenModal('categorizeContent')}>                       Categorize <IoIosArrowDropdown />                     </button>                   </li>                   <li>                     <button className=\"approve-btn\">                       Approve <FcApprove />                     </button>                   </li>                   <li>                     <button className=\"flag-btn\">                       Flag <CiFlag1 />                     </button>                   </li>                 </ul>               </div>             </div>           ))}         </div>       </div>        {isModalOpen && modalType === 'addUser' && (         <div className=\"modal-overlay\">           <div className=\"modal-content add-user-modal\">             <h2>Add a User</h2>             <form onSubmit={handleAddUser}>               <label>                 User Type:                 <select value={userType} onChange={handleUserTypeChange} required>                   <option value=\"\">Select User Type</option>                   <option value=\"Staff\">Staff</option>                   <option value=\"Student\">Student</option>                 </select>               </label>               <label>                 Name:                 <input type=\"text\" value={userName} onChange={handleUserNameChange} required />               </label>               <label>                 User ID:                 <input type=\"text\" value={userId} onChange={handleUserIdChange} required />               </label>               <button type=\"submit\">Add User</button>               <button type=\"button\" onClick={handleCloseModal}>Close</button>             </form>           </div>         </div>       )}        {isModalOpen && modalType === 'deactivateUser' && (         <div className=\"modal-overlay\">           <div className=\"modal-content deactivate-user-modal\">             <h2>Deactivate a User</h2>             <form onSubmit={handleDeactivateUser}>               <label>                 User ID:                 <input type=\"text\" value={userId} onChange={handleUserIdChange} required />               </label>               <button type=\"submit\">Deactivate User</button>               <button type=\"button\" onClick={handleCloseModal}>Close</button>             </form>           </div>         </div>       )}        {isModalOpen && modalType === 'addContent' && (         <div className=\"modal-overlay\">           <div className=\"modal-content add-content-modal\">             <h2>Add New Content</h2>             <form onSubmit={handleCreateContent}>               <label>                 Content Type:                 <select value={contentType} onChange={(e) => handleCategorySelect(e.target.value)} required>                   <option value=\"\">Select Content Type</option>                   <option value=\"Video\">Video</option>                   <option value=\"Audio\">Audio</option>                   <option value=\"Article\">Article</option>                 </select>               </label>               <label>                 Title:                 <input type=\"text\" name=\"title\" value={contentData.title} onChange={handleContentChange} required />               </label>               <label>                 Description:                 <textarea name=\"description\" value={contentData.description} onChange={handleContentChange} required />               </label>               <label>                 Link:                 <input type=\"text\" name=\"link\" value={contentData.link} onChange={handleContentChange} required />               </label>               <label>                 Thumbnail URL:                 <input type=\"text\" name=\"thumbnail\" value={contentData.thumbnail} onChange={handleContentChange} required />               </label>               <label>                 Category:                 <select value={selectedCategory} onChange={handleCategoryChange} required>                   <option value=\"\">Select Category</option>                   <option value=\"DevOps\">DevOps</option>                   <option value=\"Fullstack\">Fullstack</option>                   <option value=\"Front-End\">Front-End</option>                 </select>               </label>               <button type=\"submit\">Add Content</button>               <button type=\"button\" onClick={handleCloseModal}>Close</button>             </form>           </div>         </div>       )}     </div>   ); }  export default AdminDashboard;",
      "category": "Front-End"
    },
    {
      "id": "1fb3",
      "title": "hhnmctfhm",
      "description": "aa4h3ettj",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5",
      "thumbnail": "https://img.youtube.com/vi/{VIDEO_ID}/hqdefault.jpg",
      "category": "Front-End"
    },
    {
      "id": "53ff",
      "title": "ukmdty",
      "description": "yerjduuk",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5",
      "thumbnail": "https://img.youtube.com/vi/{VIDEO_ID}/hqdefault.jpg",
      "category": "Front-End"
    },
    {
      "id": "2cf5",
      "title": "uujmufyuh",
      "description": "ethdrtkmdtj",
      "link": "https://youtu.be/ezldKx-jPag?si=eoT3vKmEeVSzKtV5",
      "thumbnail": "https://img.youtube.com/vi/{VIDEO_ID}/hqdefault.jpg",
      "category": "Front-End"
    }
  ],
  "flags": [
    {
      "id": "1",
      "contentId": 1,
      "userId": 3,
      "reason": "Inappropriate content"
    }
  ],
  "approvals": [
    {
      "id": "1",
      "contentId": 2,
      "status": "pending",
      "adminId": 1
    }
  ],
  "subscriptions": [
    {
      "id": "1",
      "userId": 3,
      "categoryId": 1
    },
    {
      "id": "2",
      "userId": 3,
      "categoryId": 2
    }
  ],
  "notifications": [
    {
      "id": "1",
      "userId": 3,
      "contentId": 2,
      "message": "New content posted in your subscribed category: Fullstack"
    }
  ]
}